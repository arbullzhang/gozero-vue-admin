// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	api "gozero-vue-admin/service/user/api/internal/handler/api"
	authority "gozero-vue-admin/service/user/api/internal/handler/authority"
	casbin "gozero-vue-admin/service/user/api/internal/handler/casbin"
	menu "gozero-vue-admin/service/user/api/internal/handler/menu"
	operationRecord "gozero-vue-admin/service/user/api/internal/handler/operationRecord"
	user "gozero-vue-admin/service/user/api/internal/handler/user"
	"gozero-vue-admin/service/user/api/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/base/captcha",
				Handler: user.CaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/base/login",
				Handler: user.LoginHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Jwt, serverCtx.Casbin, serverCtx.OperationRecord},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/user/register",
					Handler: user.RegisterHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/changePassword",
					Handler: user.ChangePasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/getUserList",
					Handler: user.GetUserListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/setUserAuthority",
					Handler: user.SetUserAuthorityHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/user/deleteUser",
					Handler: user.DeleteUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/user/setUserInfo",
					Handler: user.SetUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/jwt/jsonInBlacklist",
					Handler: user.JsonInBlacklistHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Jwt, serverCtx.Casbin, serverCtx.OperationRecord},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/menu/getMenu",
					Handler: menu.GetMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menu/getMenuList",
					Handler: menu.GetMenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menu/addMenuAuthority",
					Handler: menu.AddMenuAuthorityHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menu/getMenuAuthority",
					Handler: menu.GetMenuAuthorityHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menu/getBaseMenuTree",
					Handler: menu.GetBaseMenuTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menu/addBaseMenu",
					Handler: menu.AddBaseMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menu/deleteBaseMenu",
					Handler: menu.DeleteBaseMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menu/updateBaseMenu",
					Handler: menu.UpdateBaseMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menu/getBaseMenuById",
					Handler: menu.GetBaseMenuByIdHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Jwt, serverCtx.Casbin, serverCtx.OperationRecord},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/authority/createAuthority",
					Handler: authority.CreateAuthorityHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/authority/deleteAuthority",
					Handler: authority.DeleteAuthorityHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/authority/updateAuthority",
					Handler: authority.UpdateAuthorityHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/authority/copyAuthority",
					Handler: authority.CopyAuthorityHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/authority/getAuthorityList",
					Handler: authority.GetAuthorityListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/authority/setDataAuthority",
					Handler: authority.SetDataAuthorityHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Jwt, serverCtx.Casbin, serverCtx.OperationRecord},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/casbin/updateCasbin",
					Handler: casbin.UpdateCasbinHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cash/getPolicyPathByAuthorityId",
					Handler: casbin.GetPolicyPathByAuthorityIdHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Jwt, serverCtx.Casbin, serverCtx.OperationRecord},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/sysOperationRecord/createSysOperationRecord",
					Handler: operationRecord.CreateSysOperationRecordHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/sysOperationRecord/deleteSysOperationRecord",
					Handler: operationRecord.DeleteSysOperationRecordHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/sysOperationRecord/deleteSysOperationRecordByIds",
					Handler: operationRecord.DeleteSysOperationRecordByIdsHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/sysOperationRecord/findSysOperationRecord",
					Handler: operationRecord.FindSysOperationRecordHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/sysOperationRecord/getSysOperationRecordList",
					Handler: operationRecord.GetSysOperationRecordListHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Jwt, serverCtx.Casbin, serverCtx.OperationRecord},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/api/createApi",
					Handler: api.CreateApiHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/deleteApi",
					Handler: api.DeleteApiHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/getApiList",
					Handler: api.GetApiListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/getApiById",
					Handler: api.GetApiByIdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/updateApi",
					Handler: api.UpdateApiHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/getAllApis",
					Handler: api.GetAllApisHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/api/deleteApisByIds",
					Handler: api.DeleteApisByIdsHandler(serverCtx),
				},
			}...,
		),
	)
}
